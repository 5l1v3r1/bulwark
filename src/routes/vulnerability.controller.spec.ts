import { UserRequest } from '../interfaces/user-request.interface';
import { Response, Request } from 'express';
import { Assessment } from '../entity/Assessment';
import { validate, IsLowercase } from 'class-validator';
import { Vulnerability } from '../entity/Vulnerability';
import { File } from '../entity/File';
import { ProblemLocation } from '../entity/ProblemLocation';
import { Asset } from '../entity/Asset';
import { User } from '../entity/User';
import { Organization } from '../entity/Organization';
import { Resource } from '../entity/Resource';
const fileUploadController = require('../routes/file-upload.controller');
import { status } from '../enums/status-enum';
import * as vulnerabilityController from './vulnerability.controller';
import {
  createConnection,
  getConnection,
  Entity,
  getRepository,
  Any,
} from 'typeorm';
import MockExpressResponse = require('mock-express-response');
import MockExpressRequest = require('mock-express-request');

describe('Vulnerability Controller', () => {
  beforeEach(async () => {
    await createConnection({
      type: 'sqlite',
      database: ':memory:',
      dropSchema: true,
      entities: [
        User,
        Assessment,
        Organization,
        File,
        Vulnerability,
        Asset,
        ProblemLocation,
        Resource,
      ],
      synchronize: true,
      logging: false,
      name: 'default',
    });
  });
  afterEach(() => {
    const conn = getConnection('default');
    return conn.close();
  });
  const org: Organization = {
    id: null,
    name: 'testOrg',
    avatar: null,
    asset: null,
    status: 'A',
  };
  const asset: Asset = {
    id: null,
    name: 'project x',
    status: 'A',
    organization: org,
    assessment: null,
  };
  const vulnerability: Vulnerability = {
    id: null,
    jiraId: 'http://www.example.com/EX-10',
    impact: 'Low',
    likelihood: 'Low',
    risk: 'Low',
    systemic: 'Yes',
    cvssScore: 3.9,
    cvssUrl: 'http://www.example.com/cvss-score',
    status: 'Open',
    description: 'This vulnerability exibits behavior linked to DoS.',
    detailedInfo: '--- Very detailed summary of the vulnerability.',
    remediation: 'Remove the flawed code in lines 20-58',
    name: 'Denial of Service',
    screenshots: null,
    assessment: null,
    problemLocations: null,
    resources: null,
  };
  const resource: Resource = {
    id: null,
    description: 'some test site with details',
    url: 'https://www.cve-info.com/some-cve',
    vulnerability: null,
  };
  const problemLocation: ProblemLocation = {
    id: null,
    location: 'http://www.example.com/dashboard/#/',
    target: 'testing',
    vulnerability: null,
  };
  const assessment: Assessment = {
    id: null,
    name: 'Test Assessment',
    jiraId: 'http://www.example.com/EX-10',
    executiveSummary: 'Test Executive Summary',
    testUrl: 'http://www.example.com/dashboard/#/',
    prodUrl: 'http://www.example.com/dashboard/#/',
    scope: 'Everything in the main dashboard.',
    tag: '1.0.1',
    startDate: new Date(),
    endDate: new Date(),
    vulnerabilities: null,
    asset: new Asset(),
    testers: null,
  };
  const data = Buffer.from([0x89]);
  const files: File = {
    id: null,
    fieldName: 'test',
    originalname: 'test.png',
    encoding: '7bit',
    mimetype: 'image/png',
    buffer: data,
    size: 2251,
    vulnerability,
  };
  const screenshots: File[] = [
    {
      id: null,
      fieldName: 'test',
      originalname: 'test1.png',
      encoding: '7bit',
      mimetype: 'image/png',
      buffer: data,
      size: 2251,
      vulnerability,
    },
    {
      id: null,
      fieldName: 'test',
      originalname: 'test2.png',
      encoding: '7bit',
      mimetype: 'image/png',
      buffer: data,
      size: 2251,
      vulnerability,
    },
    {
      id: null,
      fieldName: 'test',
      originalname: 'test3.png',
      encoding: '7bit',
      mimetype: 'image/png',
      buffer: data,
      size: 2251,
      vulnerability,
    },
  ];
  test('Get Vulnerability By ID', async () => {
    await getConnection().getRepository(Vulnerability).insert(vulnerability);
    const response = new MockExpressResponse();
    const request = new MockExpressRequest({
      params: {
        vulnId: null,
      },
    });
    await vulnerabilityController.getVulnById(request, response);
    expect(response.statusCode).toBe(400);
    const response1 = new MockExpressResponse();
    const request1 = new MockExpressRequest({
      params: {
        vulnId: 1,
      },
    });
    await vulnerabilityController.getVulnById(request1, response1);
    expect(response1.statusCode).toBe(200);
    const response2 = new MockExpressResponse();
    const request2 = new MockExpressRequest({
      params: {
        vulnId: 999,
      },
    });
    await vulnerabilityController.getVulnById(request2, response2);
    expect(response2.statusCode).toBe(404);
    const response3 = new MockExpressResponse();
    const request3 = new MockExpressRequest({
      params: {
        vulnId: 'a',
      },
    });
    await vulnerabilityController.getVulnById(request3, response3);
    expect(response3.statusCode).toBe(400);
  });
  test('Delete Vulnerability By ID', async () => {
    await getConnection().getRepository(Vulnerability).insert(vulnerability);
    const response = new MockExpressResponse();
    const request = new MockExpressRequest({
      params: {
        vulnId: null,
      },
    });
    await vulnerabilityController.deleteVulnById(request, response);
    expect(response.statusCode).toBe(400);
    const response1 = new MockExpressResponse();
    const request1 = new MockExpressRequest({
      params: {
        vulnId: null,
      },
    });
    await vulnerabilityController.deleteVulnById(request1, response1);
    expect(response1.statusCode).toBe(400);
    const response2 = new MockExpressResponse();
    const request2 = new MockExpressRequest({
      params: {
        vulnId: 'nan',
      },
    });
    await vulnerabilityController.deleteVulnById(request2, response2);
    expect(response2.statusCode).toBe(400);
    const response3 = new MockExpressResponse();
    const request3 = new MockExpressRequest({
      params: {
        vulnId: 7250973857023,
      },
    });
    await vulnerabilityController.deleteVulnById(request3, response3);
    expect(response3.statusCode).toBe(404);
    const response4 = new MockExpressResponse();
    const request4 = new MockExpressRequest({
      params: {
        vulnId: 1,
      },
    });
    await vulnerabilityController.deleteVulnById(request4, response4);
    expect(response4.statusCode).toBe(200);
  });
  test('Patch Vulnerability By ID', async () => {
    await getConnection().getRepository(Vulnerability).insert(vulnerability);
    await getConnection().getRepository(Assessment).insert(assessment);
    await getConnection()
      .getRepository(ProblemLocation)
      .insert(problemLocation);
    await getConnection().getRepository(Resource).insert(resource);
    await getConnection().getRepository(File).insert(files);
    const response = new MockExpressResponse();
    const request = new MockExpressRequest({
      params: {
        vulnId: 1,
      },
      body: {
        jiraId: 'http://www.example.com/EX-10',
        impact: 'Low',
        likelihood: 'Low',
        risk: 'Low',
        systemic: 'Yes',
        cvssScore: '3.9',
        cvssUrl: 'http://www.example.com/cvss-score',
        status: 'Open',
        description: 'This vulnerability exibits behavior linked to DoS.',
        detailedInfo: '--- Very detailed summary of the vulnerability.',
        remediation: 'Remove the flawed code in lines 20-58',
        name: 'Denial of Service',
        screenshots: 1,
        assessment: 'a1245',
        problemLocations: 1,
        resources: 1,
      },
    });
    await vulnerabilityController.patchVulnById(request, response);
    expect(response.statusCode).toBe(400);
    const response1 = new MockExpressResponse();
    const request1 = new MockExpressRequest({
      params: {
        vulnId: '2',
      },
      body: {
        jiraId: 'http://www.example.com/EX-10',
        impact: 'Low',
        likelihood: 'Low',
        risk: 'Low',
        systemic: 'Yes',
        cvssScore: '3.9',
        cvssUrl: 'http://www.example.com/cvss-score',
        status: 'Open',
        description: 'This vulnerability exibits behavior linked to DoS.',
        detailedInfo: '--- Very detailed summary of the vulnerability.',
        remediation: 'Remove the flawed code in lines 20-58',
        name: 'Denial of Service',
        screenshots: 1,
        assessment: 23,
        problemLocations: 1,
        resources: 1,
      },
    });
    await vulnerabilityController.patchVulnById(request1, response1);
    expect(response1.statusCode).toBe(404);
    const response2 = new MockExpressResponse();
    const request2 = new MockExpressRequest({
      params: {
        vulnId: 'a',
      },
      body: {
        jiraId: 'http://www.example.com/EX-10',
        impact: 'Low',
        likelihood: 'Low',
        risk: 'Low',
        systemic: 'Yes',
        cvssScore: '3.9',
        cvssUrl: 'http://www.example.com/cvss-score',
        status: 'Open',
        description: 'This vulnerability exibits behavior linked to DoS.',
        detailedInfo: '--- Very detailed summary of the vulnerability.',
        remediation: 'Remove the flawed code in lines 20-58',
        name: 'Denial of Service',
        screenshots: 1,
        assessment: 1,
        problemLocations: 1,
        resources: 1,
      },
    });
    await vulnerabilityController.patchVulnById(request2, response2);
    expect(response2.statusCode).toBe(400);
    const response3 = new MockExpressResponse();
    const request3 = new MockExpressRequest({
      params: {
        vulnId: 23,
      },
      body: {
        jiraId: 'http://www.example.com/EX-10',
        impact: 'Low',
        likelihood: 'Low',
        risk: 'Low',
        systemic: 'Yes',
        cvssScore: '3.9',
        cvssUrl: 'http://www.example.com/cvss-score',
        status: 'Open',
        description: 'This vulnerability exibits behavior linked to DoS.',
        detailedInfo: '--- Very detailed summary of the vulnerability.',
        remediation: 'Remove the flawed code in lines 20-58',
        name: 'Denial of Service',
        screenshots: 1,
        assessment: 1,
        problemLocations: 1,
        resources: 1,
      },
    });
    await vulnerabilityController.patchVulnById(request3, response3);
    expect(response3.statusCode).toBe(404);
    const response4 = new MockExpressResponse();
    const request4 = new MockExpressRequest({
      params: {
        vulnId: 1,
      },
      body: {
        jiraId: 'http://www.example.com/EX-10',
        impact: 'Low',
        likelihood: 0,
        risk: 0,
        systemic: 0,
        cvssScore: 3.9,
        cvssUrl: 'http://www.example.com/cvss-score',
        status: 'Open',
        description: 'This vulnerability exibits behavior linked to DoS.',
        detailedInfo: '--- Very detailed summary of the vulnerability.',
        remediation: 'Remove the flawed code in lines 20-58',
        name: 'Denial of Service',
        screenshots: 1,
        assessment: 1,
        problemLocations: 1,
        resources: 1,
      },
    });
    await vulnerabilityController.patchVulnById(request4, response4);
    expect(response4.statusCode).toBe(400);
    const response5 = new MockExpressResponse();
    const request5 = new MockExpressRequest({
      params: {
        vulnId: 1,
      },
      body: {
        jiraId: 'http://www.example.com/EX-10',
        impact: 'Low',
        likelihood: 'Low',
        risk: 'Low',
        systemic: 'Yes',
        cvssScore: '3.9',
        cvssUrl: 'http://www.example.com/cvss-score',
        status: 'Open',
        description: 'This vulnerability exibits behavior linked to DoS.',
        detailedInfo: '--- Very detailed summary of the vulnerability.',
        remediation: 'Remove the flawed code in lines 20-58',
        name: 'Denial of Service',
        screenshots: null,
        screenshotsToDelete: null,
        assessment: 1,
        problemLocations: 1,
        resources: 1,
      },
      files: {
        file: files,
      },
    });
    await vulnerabilityController.patchVulnById(request5, response5);
    expect(response5.statusCode).toBe(200);
  });
  test('Create Vulnerability', async () => {
    await getConnection().getRepository(Assessment).insert(assessment);
    await getConnection()
      .getRepository(ProblemLocation)
      .insert(problemLocation);
    await getConnection().getRepository(Resource).insert(resource);
    const response = new MockExpressResponse();
    const request = new MockExpressRequest({
      body: {
        jiraId: 'http://www.example.com/EX-10',
        impact: 'Low',
        likelihood: 'Low',
        risk: 'Low',
        systemic: 'Yes',
        cvssScore: '3.9',
        cvssUrl: 'http://www.example.com/cvss-score',
        status: 'Open',
        description: 'This vulnerability exibits behavior linked to DoS.',
        detailedInfo: '--- Very detailed summary of the vulnerability.',
        remediation: 'Remove the flawed code in lines 20-58',
        name: 'Denial of Service',
        assessment: 'a',
        screenshots: null,
        problemLocations: [
          {
            location: 'Dashboard',
            target: 'https://www.example.com/#/Dashboard',
          },
        ],
        resources: [{ description: 'Test', url: 'https://www.example.com' }],
      },
    });
    await vulnerabilityController.createVuln(request, response);
    expect(response.statusCode).toBe(400);
    const response1 = new MockExpressResponse();
    const request1 = new MockExpressRequest({
      body: {
        jiraId: 'http://www.example.com/EX-10',
        impact: 'Low',
        likelihood: 'Low',
        risk: 'Low',
        systemic: 'Yes',
        cvssScore: '3.9',
        cvssUrl: 'http://www.example.com/cvss-score',
        status: 'Open',
        description: 'This vulnerability exibits behavior linked to DoS.',
        detailedInfo: '--- Very detailed summary of the vulnerability.',
        remediation: 'Remove the flawed code in lines 20-58',
        name: 'Denial of Service',
        assessment: 112344,
        screenshots: null,
        problemLocations: [
          {
            location: 'Dashboard',
            target: 'https://www.example.com/#/Dashboard',
          },
        ],
        resources: [{ description: 'Test', url: 'https://www.example.com' }],
      },
    });
    await vulnerabilityController.createVuln(request1, response1);
    expect(response1.statusCode).toBe(404);
    const response2 = new MockExpressResponse();
    const request2 = new MockExpressRequest({
      body: {
        jiraId: 'http://www.example.com/EX-10',
        impact: 'Low',
        likelihood: 'Low',
        risk: 'Low',
        systemic: 'Yes',
        cvssScore: '3.09',
        cvssUrl: 'http://www.example.com/cvss-score',
        status: 'Open',
        description: 'This vulnerability exibits behavior linked to DoS.',
        detailedInfo: '--- Very detailed summary of the vulnerability.',
        remediation: 'Remove the flawed code in lines 20-58',
        name: 'Denial of Service',
        assessment: 1,
        screenshots: null,
        problemLocations: JSON.stringify({
          id: null,
          location: 'Dashboard',
          target: 'https://www.example.com/#/Dashboard',
          vulnerability: null,
        }),
        resources: JSON.stringify({
          description: 'Test',
          url: 'https://www.example.com',
        }),
      },
      files: {
        files: files,
      },
    });
    await vulnerabilityController.createVuln(request2, response2);
    expect(response2.statusCode).toBe(200);
  });
  /* test('Save Screenshots', async () => {
    await getConnection().getRepository(Vulnerability).insert(vulnerability);
    await expect(
      vulnerabilityController.saveScreenshots(
        screenshots,
        vulnerability,
        jest.fn()
      )
    ).resolves.toBe('File validation failed');
  }); */
});
